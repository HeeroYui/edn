<?xml version="1.0" encoding="UTF-8"?>
<EdnLang version="0.1" lang="C++">
	<ext>(cpp|CPP|cxx|CXX|cc|CC|hpp|HPP|hxx|HXX|hh|h|H|mm|MM|c\+\+|C\+\+|m\+\+|M\+\+|mpp|MPP)</ext>
	<pass1><!-- multiline section & parse all file (now) and when modification retrive previous modification -->
		<rule name="doxygen multiline">
			<color>commentDoxygen</color>
			<regex>
				<start>/\*(\*|!)</start>
				<stop>\*/</stop>
			</regex>
			<sub>doxyparse</sub>
		</rule>
		<rule name="comment multiline">
			<color>comment</color>
			<regex>
				<start>/\*</start>
				<stop>\*/</stop>
			</regex>
			<sub>TODO</sub>
		</rule>
		<rule name="RawText">
			<color>doubleQuoteText</color>
			<regex>
				<start>R&quot;#\(</start>
				<stop>\)#&quot;</stop>
			</regex>
		</rule>
		<rule name="comment multiline ERROR">
			<color>SYNTAX_ERROR</color>
			<regex>
				<start>/\*</start>
			</regex>
		</rule>
		<rule name="#if 0">
			<color>preprocesseur</color>
			<regex>
				<start>#[ \t]*if 0</start>
				<stop>#e(ndif|lse)</stop>
			</regex>
		</rule>
		<rule name="#if 0 ERROR">
			<color>SYNTAX_ERROR</color>
			<regex>
				<start>#[ \t]*if 0</start>
			</regex>
		</rule>
		<rule name="#preproc">
			<color>preprocesseur</color>
			<regex>#(\\[\\\n]|.)*$</regex>
		</rule>
		<rule name="inline doxygen">
			<color>commentDoxygen</color>
			<regex>//(!|/).*$</regex>
			<sub>doxyparse</sub>
		</rule>
		<rule name="inline comment">
			<color>comment</color>
			<regex>//.*$</regex>
			<sub>TODO</sub>
		</rule>
		<rule name="double quote text">
			<color>doubleQuoteText</color>
			<regex>(U|u|u8)?&quot;(\\(n|t|v|b|r|f|a|\\|\?|&quot;|0|o[0-7]{2}|x[0-9a-fA-F]{2}|u[0-9]{4}|U[0-9]{8})|.)*&quot;</regex>
		</rule>
		<rule name="simple quote text">
			<color>doubleQuoteText</color>
			<regex>&apos;(\\(n|t|v|b|r|f|a|\\|\?|&apos;|0|o[0-7]{2}|x[0-9a-fA-F]{2}|u[0-9]{4}|U[0-9]{8})|[^\n])&apos;</regex>
		</rule>
	</pass1>
	<pass2> <!-- Parse on display data ==> nor regenerate every display but every time modification apear -->
		<rule name="old school elements">
			<color>SYNTAX_ERROR</color>
			<regex>&apos;|&quot;|NULL|MAX|MIN|TRUE|FALSE|calloc|malloc|realloc|free|BOOL</regex>
		</rule>
		<rule name="my keyword">
			<color>keyword</color>
			<regex>\@return|goto|if|else|case|default|switch|break|continue|while|do|for|sizeof\@</regex>
		</rule>
		<rule name="my function keyword">
			<color>systemFunction</color>
			<regex>\@new|delete|try|catch|memset|fopen|fread|fwrite|fgets|fclose|printf|(f|s|diag_)printf|(reinterpret|static|dynamic|const)_cast\@</regex>
		</rule>
		<rule name="my type">
			<color>type</color>
			<regex>\@bool|char(16_t|32_t)?|double|float|u?int(8|16|32|64|128)?(_t)?|long|short|signed|size_t|unsigned|void|(I|U)(8|16|32|64|128)\@</regex>
		</rule>
		<rule name="std type">
			<color>type</color>
			<regex>\@std::[a-zA-Z_:][\w:]*\@</regex>
		</rule>
		<rule name="etk type">
			<color>type</color>
			<regex>\@etk::(Vector|Array|List|Function|String|UString|RegEx|Pair|NullPtr|Color|Exception|exception::(InvalidArgument|DomainError|LengthError|OutOfRange|RangeError|OverflowError|UnderflowError|CastError|AllocationError|RuntimeError))\@</regex>
		</rule>
		<rule name="my storage keyword">
			<color>storageKeyword</color>
			<regex>\@inline|const|class|namespace|virtual|private|public|protected|friend|const|extern|mutable|auto|register|static|unsigned|signed|volatile|char|double|float|int|long|short|void|typedef|struct|union|enum|override|final\@</regex>
		</rule>
		<rule name="my common Define">
			<color>commonDefine</color>
			<regex>\@nullptr|__(LINE|DATA|FILE|func|TIME|STDC|PRETTY_FUNCTION|FUNCTION)__\@</regex>
		</rule>
		<rule name="numeric constant">
			<color>number</color>
			<regex>\@((0(x|X)[0-9a-fA-F]*)|(\d+\.?\d*|\.\d+)((e|E)(\+|\-)?\d+)?)(LL|L|l|UL|ul|u|U|F|f)?\@</regex>
		</rule>
		<rule name="my boolean">
			<color>boolean</color>
			<regex>\@true|false\@</regex>
		</rule>
		<rule name="BIG LETTER">
			<color>macro</color>
			<regex>\@[A-Z_][A-Z_0-9]{3,500}\@</regex>
		</rule>
		<rule name="CPP member">
			<color>memberClass</color>
			<regex>\@((m|s|p|s|g)_|property|signal)\w+\@</regex>
		</rule>
		<rule name="CPP member (bad version)">
			<color>memberClass</color>
			<regex>\@\w+_\@</regex>
		</rule>
		<rule name="function input">
			<color>inputFunction</color>
			<regex>\@_\w+\@</regex>
		</rule>
		<rule name="Function name">
			<color>functionName</color>
			<regex>\@((\w|_)+[ \t]*\()</regex>
		</rule>
		<rule name="condition">
			<color>boolean</color>
			<regex>==|&lt;=|&gt;=|!=|&lt;{1,2}|&gt;{1,2}|&amp;&amp;|\{|\}</regex>
		</rule>
		<rule name="simpleQuteTextError">
			<color>SYNTAX_ERROR</color>
			<regex>&apos;|&quot;</regex>
		</rule>
	</pass2>
	<pass name="doxyparse">
		<rule name="knownkey">
			<color>doxygen-key-known</color>
			<regex>(\@|\\)[\t ]*(addindex|addtogroup|anchor|arg|attention|author|authors|a|brief|bug|b|callgraph|category|cite|class|code|cond|copybrief|copydetails|copydoc|copyright|date|def|defgroup|deprecated|details|diafile|dir|docbookonly|dontinclude|dot|dotfile|else|elseif|em|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endif|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|endverbatim|enduml|endxmlonly|enum|example|exception|extends|e|file|fn|headerfile|hidecallergraph|hidecallgraph|hideinitializer|htmlinclude|htmlonly|idlexcept|ifnot|if|image|implements|includelineno|include|ingroup|internal|invariant|interface|latexinclude|latexonly|line|link|license|li|mainpage|manonly|memberof|msc|mscfile|name|namespace|nosubgrouping|note|n|overload|package|page|paragraph|param|parblock|par|post|pre|private|privatesection|property|protected|protectedsection|protocol|public|publicsection|pure|p|refitem|ref|related|relates|relatedalso|relatesalso|remark|remarks|result|return|returns|retval|rtfonly|sa|secreflist|section|see|short|showinitializer|since|skip|skipline|snippet|startuml|struct|subpage|subsection|subsubsection|tableofcontents|test|throw|throws|todo|tparam|typedef|union|until|var|verbatim|verbinclude|version|vhdlflow|warning|weakgroup|xmlonly|xrefitem)</regex>
		</rule>
		<rule name="key">
			<color>doxygen-key</color>
			<regex>(\@|\\)[\t ]*\w+</regex>
		</rule>
		<rule name="in-out">
			<color>doxygen-in-out</color>
			<regex>\[(in|in,out|out)\]</regex>
		</rule>
		<rule name="function input">
			<color>inputFunction</color>
			<regex>\@_\w+\@</regex>
		</rule>
	</pass>
	<pass name="TODO">
		<rule name="function input">
			<color>SYNTAX_ERROR</color>
			<regex>TODO[ \t]*:.*$</regex>
		</rule>
	</pass>
</EdnLang>