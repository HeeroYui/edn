<?xml version="1.0" encoding="UTF-8"?>
<EdnLang version="0.1" lang="C/C++">
	<ext>*.c</ext>
	<ext>*.cpp</ext>
	<ext>*.cxx</ext>
	<ext>*.cc</ext>
	<ext>*.h</ext>
	<ext>*.hpp</ext>
	<ext>*.hxx</ext>
	<ext>*.m</ext>
	<ext>*.mm</ext>
	<pass1><!-- multiline section & parse all file (now) and when modification retrive previous modification -->
		<rule name="my comment multiline doxygen">
			<color>commentDoxygen</color>
			<regex>/\*\*(.|\r|\n)*?\*/</regex>
		</rule>
		<rule name="code Review">
			<color>SYNTAX_ERROR</color>
			<regex>/\*[ \t]*TODO :(.|\r|\n)*?\*/</regex>
		</rule>
		<rule name="my comment multiline">
			<color>comment</color>
			<regex>/\*(.|\r|\n)*?\*/</regex>
		</rule>
		<rule name="my if 0">
			<color>preprocesseur</color>
			<regex>#[ \t]*if 0(.|\r|\n)*?#(endif|else)</regex>
		</rule>
		<rule name="my preprocesseur">
			<color>preprocesseur</color>
			<regex>#(\\[\\\n]|.)*</regex>
		</rule>
		<rule name="my comment doxygen">
			<color>commentDoxygen</color>
			<regex>//!.*</regex>
		</rule>
		<rule name="my todo comment">
			<color>SYNTAX_ERROR</color>
			<regex>//[ \t]*TODO[ \t]*:.*</regex>
		</rule>
		<rule name="my comment">
			<color>comment</color>
			<regex>//.*</regex>
		</rule>
		<rule name="doubleQuteText">
			<color>doubleQuoteText</color>
			<regex>"(\\[\\"]|.)*"</regex>
		</rule>
		<rule name="simpleQuteText">
			<color>doubleQuoteText</color>
			<regex>'((\\[\\'])|.){1,2}'</regex>
		</rule>
		<rule name="simpleQuteTextError">
			<color>SYNTAX_ERROR</color>
			<regex>'</regex>
		</rule>
	</pass1>
	<pass2> <!-- Parse on display data ==> nor regenerate every display but every time modification apear -->
		<rule name="my keyword">
			<color>keyword</color>
			<regex>\@return|goto|if|else|case|default|switch|break|continue|while|do|for|sizeof\@</regex>
		</rule>
		<rule name="my function keyword">
			<color>systemFunction</color>
			<regex>\@new|delete|try|catch|memset|fopen|fread|fwrite|fgets|fclose|printf|(f|s|diag_)printf|calloc|malloc|realloc|(cyg|sup)_([a-z]|[A-Z]|[0-9]|_)+\@</regex>
		</rule>
		<rule name="my type">
			<color>type</color>
			<regex>\@bool|BOOL|char(16_t|32_t)?|double|float|u?int(8|16|32|64|128)?(_t)?|long|short|signed|size_t|unsigned|void|(I|U)(8|16|32|64|128)\@</regex>
		</rule>
		<rule name="std type">
			<color>type</color>
			<regex>\@std::(vector|(u16|u32|w)?string|codecvt_utf(16|8_utf16|8)+|complex|iterator(_traits)?|tuple(_element|_size)?|pair)\@</regex>
		</rule>
		<rule name="my storage keyword">
			<color>storageKeyword</color>
			<regex>\@inline|const|class|virtual|private|public|protected|friend|const|extern|auto|register|static|unsigned|signed|volatile|char|double|float|int|long|short|void|typedef|struct|union|enum\@</regex>
		</rule>
		<rule name="my common Define">
			<color>commonDefine</color>
			<regex>\@NULL|MAX|MIN|__LINE__|__DATA__|__FILE__|__func__|__TIME__|__STDC__\@</regex>
		</rule>
		<rule name="numeric constant">
			<color>number</color>
			<regex>\@((0(x|X)[0-9a-fA-F]*)|(\d+\.?\d*|\.\d+)((e|E)(\+|\-)?\d+)?)(L|l|UL|ul|u|U|F|f)?\@</regex>
		</rule>
		<rule name="my boolean">
			<color>boolean</color>
			<regex>\@true|TRUE|false|FALSE\@</regex>
		</rule>
		<rule name="BIG LETTER">
			<color>macro</color>
			<regex>\@[A-Z_][A-Z_0-9]{3,500}\@</regex>
		</rule>
		<rule name="CPP member">
			<color>memberClass</color>
			<regex>\@m_[A-Za-z_0-9]*\@</regex>
		</rule>
		<rule name="function input">
			<color>inputFunction</color>
			<regex>\@_[A-Za-z_0-9]*\@</regex>
			<max>false</max>
		</rule>
		<!--
		<rule name="Function name">
			<color>functionName</color>
			<regex>\@(\w|_)+[ \t]*\(</regex>
		</rule>
		<rule name="condition">
			<color>boolean</color>
			<regex>==|&lt;=|&gt;=|!=|&lt;{1,2}|&gt;{1,2}|&amp;&amp;|\{|\}|</regex>
		</rule>
		-->
		<rule name="BIG LETTER">
			<color>macro</color>
			<regex>([A-Z]|_){4,500}</regex>
			<elemSubColor id="1">doxElem</elemSubColor>
		</rule>
	</pass2>
</EdnLang>
