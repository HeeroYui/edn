<?xml version="1.0" encoding="UTF-8"?>
<EdnLang version="0.1" lang="php: pretty home page">
	<ext>*.php</ext>
	<ext>*.php3</ext>
	<ext>*.php4</ext>
	<ext>*.phtml</ext>
	<pass1><!-- multiline section & parse all file (now) and when modification retrive previous modification -->
		<rule name="my comment multiline">
			<color>comment</color>
			<start>/\*</start>
			<end>\*/</end>
		</rule>
		<rule name="my todo comment">
			<color>SYNTAX_ERROR</color>
			<start>//[ \t]*TODO[ \t]*:</start>
			<end>\n</end>
			<EscapeChar>\</EscapeChar>
		</rule>
		<rule name="my comment inline">
			<color>comment</color>
			<start>#</start>
			<end>\n</end>
		</rule>
		<rule name="my comment">
			<color>comment</color>
			<start>//</start>
			<end>\n</end>
			<EscapeChar>\</EscapeChar>
		</rule>
		<rule name="doubleQuteText">
			<color>doubleQuoteText</color>
			<start>"</start>
			<end>"</end>
			<EscapeChar>\</EscapeChar>
		</rule>
		<rule name="simpleQuteText">
			<color>doubleQuoteText</color>
			<start>'</start>
			<end>'</end>
		</rule>
	</pass1>
	<pass2> <!-- Parse on display data ==> nor regenerate every display but every time modification apear -->
		<rule name="my keyword">
			<color>keyword</color>
			<start>[\$]+[a-zA-Z_][a-zA-Z0-9_]*</start>
		</rule>
		<rule name="my type">
			<color>type</color>
			<start>\@array|bool|boolean|double|float|int|integer|numeric|object|resource|string|unset\@</start>
		</rule>
		<rule name="my storage keyword">
			<color>storageKeyword</color>
			<start>\@abstract|and|as|break|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|interface|isset|list|namespace|new|or|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor\@</start>
		</rule>
		<rule name="my common Define">
			<color>commonDefine</color>
			<start>\@doubleval|floatval|gettype|intval|print_r|serialize|settype|strval|unserialize|var_dump|var_export\@</start>
		</rule>
		<rule name="numeric constant">
			<color>number</color>
			<start>\@((0(x|X)[0-9a-fA-F]*)|(\d+\.?\d*|\.\d+)((e|E)(\+|\-)?\d+)?)(L|l|UL|ul|u|U|F|f)?\@</start>
		</rule>
		<rule name="my boolean">
			<color>boolean</color>
			<start>\@true|TRUE|false|FALSE\@</start>
		</rule>
		<rule name="Function name">
			<color>functionName</color>
			<start>\@(\w|_)+[ \t]*\(</start>
		</rule>
		<rule name="condition">
			<color>boolean</color>
			<start>==|&lt;=|&gt;=|!=|&lt;|&gt;|&amp;&amp;|\{|\}|</start>
		</rule>
	</pass2>
</EdnLang>
